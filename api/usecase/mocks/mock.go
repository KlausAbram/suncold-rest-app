// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/klaus-abram/suncold-restful-app/models"
)

// MockAuthorisation is a mock of Authorisation interface.
type MockAuthorisation struct {
	ctrl     *gomock.Controller
	recorder *MockAuthorisationMockRecorder
}

// MockAuthorisationMockRecorder is the mock recorder for MockAuthorisation.
type MockAuthorisationMockRecorder struct {
	mock *MockAuthorisation
}

// NewMockAuthorisation creates a new mock instance.
func NewMockAuthorisation(ctrl *gomock.Controller) *MockAuthorisation {
	mock := &MockAuthorisation{ctrl: ctrl}
	mock.recorder = &MockAuthorisationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAuthorisation) EXPECT() *MockAuthorisationMockRecorder {
	return m.recorder
}

// CreateAgent mocks base method.
func (m *MockAuthorisation) CreateAgent(agent models.Agent) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAgent", agent)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAgent indicates an expected call of CreateAgent.
func (mr *MockAuthorisationMockRecorder) CreateAgent(agent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgent", reflect.TypeOf((*MockAuthorisation)(nil).CreateAgent), agent)
}

// CreateJWT mocks base method.
func (m *MockAuthorisation) CreateJWT(agentname, password string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateJWT", agentname, password)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateJWT indicates an expected call of CreateJWT.
func (mr *MockAuthorisationMockRecorder) CreateJWT(agentname, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateJWT", reflect.TypeOf((*MockAuthorisation)(nil).CreateJWT), agentname, password)
}

// ParseJWT mocks base method.
func (m *MockAuthorisation) ParseJWT(token string) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseJWT", token)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseJWT indicates an expected call of ParseJWT.
func (mr *MockAuthorisationMockRecorder) ParseJWT(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseJWT", reflect.TypeOf((*MockAuthorisation)(nil).ParseJWT), token)
}

// MockWeatherSearching is a mock of WeatherSearching interface.
type MockWeatherSearching struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherSearchingMockRecorder
}

// MockWeatherSearchingMockRecorder is the mock recorder for MockWeatherSearching.
type MockWeatherSearchingMockRecorder struct {
	mock *MockWeatherSearching
}

// NewMockWeatherSearching creates a new mock instance.
func NewMockWeatherSearching(ctrl *gomock.Controller) *MockWeatherSearching {
	mock := &MockWeatherSearching{ctrl: ctrl}
	mock.recorder = &MockWeatherSearchingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherSearching) EXPECT() *MockWeatherSearchingMockRecorder {
	return m.recorder
}

// GetWeatherCity mocks base method.
func (m *MockWeatherSearching) GetWeatherCity(agentId int, location string) (*models.WeatherResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWeatherCity", agentId, location)
	ret0, _ := ret[0].(*models.WeatherResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWeatherCity indicates an expected call of GetWeatherCity.
func (mr *MockWeatherSearchingMockRecorder) GetWeatherCity(agentId, location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWeatherCity", reflect.TypeOf((*MockWeatherSearching)(nil).GetWeatherCity), agentId, location)
}

// MockGettingWeatherHistory is a mock of GettingWeatherHistory interface.
type MockGettingWeatherHistory struct {
	ctrl     *gomock.Controller
	recorder *MockGettingWeatherHistoryMockRecorder
}

// MockGettingWeatherHistoryMockRecorder is the mock recorder for MockGettingWeatherHistory.
type MockGettingWeatherHistoryMockRecorder struct {
	mock *MockGettingWeatherHistory
}

// NewMockGettingWeatherHistory creates a new mock instance.
func NewMockGettingWeatherHistory(ctrl *gomock.Controller) *MockGettingWeatherHistory {
	mock := &MockGettingWeatherHistory{ctrl: ctrl}
	mock.recorder = &MockGettingWeatherHistoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGettingWeatherHistory) EXPECT() *MockGettingWeatherHistoryMockRecorder {
	return m.recorder
}

// GetAgentHistory mocks base method.
func (m *MockGettingWeatherHistory) GetAgentHistory(agent string) ([]models.WeatherRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAgentHistory", agent)
	ret0, _ := ret[0].([]models.WeatherRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentHistory indicates an expected call of GetAgentHistory.
func (mr *MockGettingWeatherHistoryMockRecorder) GetAgentHistory(agent interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentHistory", reflect.TypeOf((*MockGettingWeatherHistory)(nil).GetAgentHistory), agent)
}

// GetHistoryLocation mocks base method.
func (m *MockGettingWeatherHistory) GetHistoryLocation(location string) ([]models.WeatherResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryLocation", location)
	ret0, _ := ret[0].([]models.WeatherResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryLocation indicates an expected call of GetHistoryLocation.
func (mr *MockGettingWeatherHistoryMockRecorder) GetHistoryLocation(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryLocation", reflect.TypeOf((*MockGettingWeatherHistory)(nil).GetHistoryLocation), location)
}

// GetHistoryMoment mocks base method.
func (m *MockGettingWeatherHistory) GetHistoryMoment(moment string) ([]models.WeatherRequest, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHistoryMoment", moment)
	ret0, _ := ret[0].([]models.WeatherRequest)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetHistoryMoment indicates an expected call of GetHistoryMoment.
func (mr *MockGettingWeatherHistoryMockRecorder) GetHistoryMoment(moment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHistoryMoment", reflect.TypeOf((*MockGettingWeatherHistory)(nil).GetHistoryMoment), moment)
}

// MockGettingForecastByDays is a mock of GettingForecastByDays interface.
type MockGettingForecastByDays struct {
	ctrl     *gomock.Controller
	recorder *MockGettingForecastByDaysMockRecorder
}

// MockGettingForecastByDaysMockRecorder is the mock recorder for MockGettingForecastByDays.
type MockGettingForecastByDaysMockRecorder struct {
	mock *MockGettingForecastByDays
}

// NewMockGettingForecastByDays creates a new mock instance.
func NewMockGettingForecastByDays(ctrl *gomock.Controller) *MockGettingForecastByDays {
	mock := &MockGettingForecastByDays{ctrl: ctrl}
	mock.recorder = &MockGettingForecastByDaysMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGettingForecastByDays) EXPECT() *MockGettingForecastByDaysMockRecorder {
	return m.recorder
}

// GetForcastByDays mocks base method.
func (m *MockGettingForecastByDays) GetForcastByDays(location string, days int) ([]models.WeatherResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForcastByDays", location, days)
	ret0, _ := ret[0].([]models.WeatherResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForcastByDays indicates an expected call of GetForcastByDays.
func (mr *MockGettingForecastByDaysMockRecorder) GetForcastByDays(location, days interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForcastByDays", reflect.TypeOf((*MockGettingForecastByDays)(nil).GetForcastByDays), location, days)
}
